// <auto-generated />
using System;
using CustomerOrderSystemContext.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CustomerOrderSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CustomerOrderSystem.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a36a0bd4-4587-434e-8c52-5b1001c77345",
                            Email = "john.doe@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.DOE@EXAMPLE.COM",
                            NormalizedUserName = "JOHN.DOE",
                            PasswordHash = "AQAAAAIAAYagAAAAELUd6KOQP7nDvkH2BVmRVB5SFoVlhuSgo+pMxCrhCBWVslmVAcD+nOmEPiesko6EMg==",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "7368d7f1-2c5e-40e7-b169-8ae13a379ff9",
                            TwoFactorEnabled = false,
                            UserName = "john.doe"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b1e5403-fe9a-4f4c-859d-ba1b81832ada",
                            Email = "jane.smith@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JANE.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "JANE.SMITH",
                            PasswordHash = "AQAAAAIAAYagAAAAEPny2HKmjz5EbvtQLR5Vqs5nKiljW2TywsTIgsxtws0QQ7dhV0JhvGJ5Odcc0XckMA==",
                            PhoneNumberConfirmed = false,
                            Role = 1,
                            SecurityStamp = "92c0794d-4dab-4152-82a1-7feba545a0e0",
                            TwoFactorEnabled = false,
                            UserName = "jane.smith"
                        });
                });

            modelBuilder.Entity("CustomerOrderSystem.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerName = "John Doe",
                            OrderDate = new DateTime(2024, 7, 16, 2, 1, 6, 350, DateTimeKind.Local).AddTicks(1804),
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2,
                            CustomerName = "Jane Smith",
                            OrderDate = new DateTime(2021, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "2"
                        });
                });

            modelBuilder.Entity("CustomerOrderSystem.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("OrderId", "ProductId")
                        .IsUnique();

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            OrderId = 2,
                            Price = 20.0m,
                            ProductDescription = "A hat",
                            ProductId = 4,
                            ProductName = "Hat",
                            Quantity = 2
                        },
                        new
                        {
                            Id = 5,
                            OrderId = 2,
                            Price = 20.0m,
                            ProductDescription = "its a t-shirt size 10 cheap and amazing",
                            ProductId = 5,
                            ProductName = "T-Shirt",
                            Quantity = 2
                        },
                        new
                        {
                            Id = 6,
                            OrderId = 2,
                            Price = 20.0m,
                            ProductDescription = "A World class magnificent ball",
                            ProductId = 6,
                            ProductName = "Ball",
                            Quantity = 2
                        },
                        new
                        {
                            Id = 7,
                            OrderId = 2,
                            Price = 20.0m,
                            ProductDescription = "A pair of shoes",
                            ProductId = 7,
                            ProductName = "Shoes",
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("CustomerOrderSystem.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "its a t-shirt size 10 cheap and amazing",
                            Price = 15.75m,
                            ProductName = "T-Shirt"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A World class magnificent ball",
                            Price = 15.75m,
                            ProductName = "Ball"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A pair of shoes",
                            Price = 15.75m,
                            ProductName = "Shoes"
                        },
                        new
                        {
                            Id = 4,
                            Description = "A hat",
                            Price = 15.75m,
                            ProductName = "Hat"
                        },
                        new
                        {
                            Id = 5,
                            Description = "its a t-shirt size 10 cheap and amazing",
                            Price = 15.75m,
                            ProductName = "T-Shirt"
                        },
                        new
                        {
                            Id = 6,
                            Description = "A World class magnificent ball",
                            Price = 15.75m,
                            ProductName = "Ball"
                        },
                        new
                        {
                            Id = 7,
                            Description = "A pair of shoes",
                            Price = 15.75m,
                            ProductName = "Shoes"
                        },
                        new
                        {
                            Id = 8,
                            Description = "A hat",
                            Price = 15.75m,
                            ProductName = "Hat"
                        },
                        new
                        {
                            Id = 9,
                            Description = "its a t-shirt size 10 cheap and amazing",
                            Price = 15.75m,
                            ProductName = "T-Shirt"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CustomerOrderSystem.Models.Order", b =>
                {
                    b.HasOne("CustomerOrderSystem.Models.ApplicationUser", "User")
                        .WithMany("Order")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CustomerOrderSystem.Models.OrderItem", b =>
                {
                    b.HasOne("CustomerOrderSystem.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerOrderSystem.Models.Product", "Product")
                        .WithOne("OrderItem")
                        .HasForeignKey("CustomerOrderSystem.Models.OrderItem", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CustomerOrderSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CustomerOrderSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CustomerOrderSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerOrderSystem.Models.ApplicationUser", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("CustomerOrderSystem.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CustomerOrderSystem.Models.Product", b =>
                {
                    b.Navigation("OrderItem")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
